# -*- coding: utf-8 -*-
"""model_used_ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14daqRFrmI31ScZODzklIO6bywAVg3gCS
"""

#employ salary prediction
#load liberies

from google.colab import files

# Trigger the file upload dialog
uploaded = files.upload()

# After uploading, you can access the file like this:
import pandas as pd
data = pd.read_csv(next(iter(uploaded)))
data.head()

data.shape

data.head

#Null values fetching
data.isna()

#Count of null values
data.isna().sum()

print(data.occupation.value_counts())

print(data.gender.value_counts())

print(data.education.value_counts())

print(data.workclass.value_counts())

print(data['marital-status'].value_counts())

data.occupation.replace({"?":"others"},inplace=True)
print(data.occupation.value_counts())

data.workclass.replace({"?":"Notlisted"},inplace=True)
print(data.workclass.value_counts())

data=data[data['workclass']!='Without-pay']
data=data[data['workclass']!='Never-worked']

print(data.workclass.value_counts())

data.shape

data=data[data['education']!='1st-4th']
data=data[data['education']!='Preschool']
data=data[data['education']!='5th-6th']

print(data.education.value_counts())

data.shape

#redundancy(delete the unwante data,(education numver is enough so we delete education)
data.drop(columns=['education'],inplace=True)

data

import matplotlib.pyplot as plt
plt.boxplot(data['age'])

data = data[(data['age'] <= 75) & (data['age'] >= 0)]

import matplotlib.pyplot as plt
plt.boxplot(data['age'])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
data['workclass'] =encoder.fit_transform(data['workclass'])

x = data.drop(columns=['income'])
y = data['income']
x

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Make a copy to avoid SettingWithCopyWarning
data = data.copy()

# List of categorical columns to encode
categorical_cols = ['workclass', 'marital-status', 'occupation',
                    'relationship', 'race', 'gender', 'native-country']

# Initialize the encoder
encoder = LabelEncoder()

# Apply encoding to each column
for col in categorical_cols:
    data[col] = encoder.fit_transform(data[col])

x = data.drop(columns=['income'])
y = data['income']
x

data.drop(columns=['fnlwgt'], inplace=True)

y

#minmax scaler(to scale the data to machine learning format)
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()  # Notice the parentheses to instantiate the scaler
x = scaler.fit_transform(x)
x

xtrain

#HistGradientBoostingClassifier
from sklearn.ensemble import HistGradientBoostingClassifier
hgb_model = HistGradientBoostingClassifier(max_iter=300, learning_rate=0.05)
hgb_model.fit(xtrain, ytrain)
hgb_pred = hgb_model.predict(xtest)
print("ðŸ“ˆ HistGradientBoosting Accuracy:", accuracy_score(ytest, hgb_pred))